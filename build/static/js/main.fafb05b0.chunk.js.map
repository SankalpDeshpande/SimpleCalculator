{"version":3,"sources":["display/display.jsx","buttons/buttons.jsx","logic/operate.js","Calculate/Calculate.js","App.jsx","serviceWorker.js","index.js"],"names":["Display","props","Container","fixed","class","this","value","operation","React","Component","Buttons","handleClick","name","clickHandler","Grid","container","spacing","item","xs","Button","variant","id","onClick","operate","numberOne","numberTwo","Number","toFixed","alert","Error","calculate","state","buttonName","total","next","includes","number","Infinity","isNumber","result","parseFloat","toString","App","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fafb05b0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default class Display extends React.Component {\r\n  static propTypes = {\r\n    value: PropTypes.string,\r\n    operation: PropTypes.string\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <Container fixed class=\"displayClass\">\r\n        <div class=\"displayNumber\">{this.props.value}</div>\r\n        <div class=\"displayOperator\"> Operator:{this.props.operation ? this.props.operation : \"nill\"}</div>\r\n        </Container>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport default class Buttons extends React.Component {\r\n  static propTypes = {\r\n    clickHandler: PropTypes.func,\r\n  };\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  handleClick = (name) => {\r\n    this.props.clickHandler(name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" id=\"highlight\" onClick={() => this.handleClick(\"AC\")}>AC</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"+/-\")}>+/-</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"%\")}>%</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"/\")}>/</Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"7\")}>7</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"8\")}>8</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"9\")}>9</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"X\")}>X</Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"4\")}>4</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"5\")}>5</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"6\")}>6</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"-\")}>-</Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"1\")}>1</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"2\")}>2</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"3\")}>3</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"+\")}>+</Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\"0\")}>0</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" onClick={() => this.handleClick(\".\")}>.</Button>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button variant=\"contained\" class=\"block\" id=\"highlight\" onClick={() => this.handleClick(\"=\")}>=</Button>\r\n        </Grid>\r\n      </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}","export default function operate(numberOne, numberTwo, operation) {\r\n  if (operation === \"+\") {\r\n    return Number(numberOne) + Number(numberTwo);\r\n  }\r\n  if (operation === \"-\") {\r\n    return (Number(numberOne) - Number(numberTwo)).toFixed(8);\r\n  }\r\n  if (operation === \"X\") {\r\n    return Number(numberOne) * Number(numberTwo);\r\n  }\r\n  if (operation === \"/\") {\r\n    if (numberTwo === \"0\") {\r\n      alert(\"Divide by 0 error\");\r\n      return \"0\";\r\n    } else {\r\n      return Number(numberOne) / Number(numberTwo);\r\n    }\r\n  }\r\n  throw Error(`Unknown operation '${operation}'`);\r\n}\r\n","/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:String      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nimport operate from \"../logic/operate\";\r\n\r\nfunction isNumber(value){\r\n  const number = Number(value);\r\n  return typeof number === 'number' && number === number && number !== Infinity && number !== -Infinity;\r\n}\r\n\r\nexport const calculate = (state, buttonName) =>{\r\n    if (buttonName === \"AC\") {\r\n        return {\r\n          total: null,\r\n          next: null,\r\n          operation: null\r\n        };\r\n      }\r\n\r\n      if (buttonName === \".\") {\r\n        if (state.next) {\r\n          // ignore a . if the next number already has one\r\n          if (state.next.includes(\".\")) {\r\n            return {};\r\n          }\r\n          return { next: state.next + \".\" };\r\n        }\r\n        return { next: \"0.\" };\r\n      }\r\n\r\n      if (isNumber(buttonName)) {\r\n        if (buttonName === \"0\" && state.next === \"0\") {\r\n          return {};\r\n        }\r\n        // If there is an operation, update next\r\n        if (state.operation) {\r\n          if (state.next) {\r\n            return { next: state.next + buttonName };\r\n          }\r\n          return { next: buttonName };\r\n        }\r\n        // If there is no operation, update next and clear the value\r\n        if (state.next) {\r\n          const next = state.next === \"0\" ? buttonName : state.next + buttonName;\r\n          return {\r\n            next,\r\n            total: null,\r\n          };\r\n        }\r\n        return {\r\n          next: buttonName,\r\n          total: null,\r\n        };\r\n      }\r\n\r\n      if (buttonName === \"%\") {\r\n        if (state.operation && state.next) {\r\n          const result = operate(state.total, state.next, state.operation);\r\n          return {\r\n            total: operate(result, 100, \"X\"),\r\n            next: null,\r\n            operation: null,\r\n          };\r\n        }\r\n        if (state.next) {\r\n          return {\r\n            next: operate(state.next, 100, \"/\")\r\n          };\r\n        }\r\n        return {\r\n          total: operate(state.total, 100, \"/\")\r\n        };\r\n      }\r\n\r\n      if (buttonName === \"+/-\") {\r\n        if (state.next) {\r\n          return { next: (-1 * parseFloat(state.next)).toString() };\r\n        }\r\n        if (state.total) {\r\n          return { total: (-1 * parseFloat(state.total)).toString() };\r\n        }\r\n        return {};\r\n      }\r\n\r\n      if (buttonName === \"=\") {\r\n        if (state.next && state.operation) {\r\n          return {\r\n            total: operate(state.total, state.next, state.operation),\r\n            next: null,\r\n            operation: null,\r\n          };\r\n        } else {\r\n          // '=' with no operation, nothing to do\r\n          return {};\r\n        }\r\n      }\r\n      if (state.operation) {\r\n        return {\r\n          total: operate(state.total, state.next, state.operation),\r\n          next: null,\r\n          operation: buttonName,\r\n        };\r\n      }\r\n      return {\r\n        total: state.next,\r\n        next: null,\r\n        operation: buttonName,\r\n      };\r\n};","import React from 'react';\r\nimport Display from './display/display';\r\nimport Buttons from './buttons/buttons';\r\nimport {calculate} from './Calculate/Calculate';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      total: null,\r\n      next: null,\r\n      operation: null\r\n    };\r\n  }\r\n\r\n  handleClick= (name) =>{\r\n    this.setState(calculate(this.state, name));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <Container fixed>\r\n        <div><Display value={this.state.next || this.state.total || \"0\"} operation={this.state.operation}/></div>\r\n        <div><Buttons clickHandler={this.handleClick}/></div>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}